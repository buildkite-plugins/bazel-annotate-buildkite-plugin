#!/bin/bash
set -euo pipefail

# Fast Bazel BEP Protobuf Failure Extractor
# This library focuses exclusively on extracting build and test failures from BEP protobuf files

# Check if protoc is available
check_protoc() {
  if ! command -v protoc >/dev/null 2>&1; then
    echo "‚ùå Error: protoc (Protocol Buffer compiler) is not installed"
    echo "üí° Install with: brew install protobuf (macOS) or apt-get install protobuf-compiler (Ubuntu)"
    return 1
  fi
  return 0
}

# Extract only failures from BEP protobuf file
extract_failures_from_bep() {
  local bep_file="$1"
  
  # Verify protoc is available
  if ! check_protoc; then
    return 1
  fi
  
  echo "üìÑ Processing BEP file: $bep_file"
  
  # Use protoc to decode the binary protobuf file
  # We're looking for failure-related events only
  local failures_found=false
  local temp_decoded
  temp_decoded=$(mktemp)
  
  # Decode the protobuf file to text format
  if ! protoc --decode_raw < "$bep_file" > "$temp_decoded" 2>/dev/null; then
    echo "‚ùå Failed to decode protobuf file"
    rm -f "$temp_decoded"
    return 1
  fi
  
  # Look for failure patterns in the decoded output
  local failure_content
  failure_content=$(grep -i -A 10 -B 2 "fail\|error\|abort" "$temp_decoded" || true)
  
  if [[ -n "$failure_content" ]]; then
    failures_found=true
    echo ""
    echo "üö® BUILD FAILURES DETECTED:"
    echo "=" | head -c 50; echo ""
    echo "$failure_content"
    echo "=" | head -c 50; echo ""
  fi
  
  # Clean up
  rm -f "$temp_decoded"
  
  if [[ "$failures_found" == "true" ]]; then
    echo "‚ùå Found failures in build"
    # Create a simple Buildkite annotation if we're in Buildkite
    if [[ -n "${BUILDKITE:-}" ]] && command -v buildkite-agent >/dev/null 2>&1; then
      echo "Creating Buildkite annotation..."
      create_failure_annotation "$failure_content"
    fi
    return 1
  else
    echo "‚úÖ No failures detected in BEP file"
    return 0
  fi
}

# Create a simple, focused Buildkite annotation for failures
create_failure_annotation() {
  local failure_content="$1"
  
  local annotation_content="### üö® Build Failures

\`\`\`
$failure_content
\`\`\`

---
*Generated by Bazel Failure Extractor*"
  
  if command -v buildkite-agent >/dev/null 2>&1; then
    echo "$annotation_content" | buildkite-agent annotate --style "error" --context "bazel-failures"
  fi
}
